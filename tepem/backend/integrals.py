from typing import Callable

import numpy as np
import numpy.typing as npt

# order 5
# WEIGHTS = [
#     0.317460317460320 / 4,
#     0.317460317460319 / 4,
#     0.555555555555555 / 4,
#     0.555555555555555 / 4,
#     0.555555555555555 / 4,
#     0.555555555555555 / 4,
#     1.142857142857139 / 4,
# ]

# POINTS = [
#     (0.5, 0.9830458915396469),
#     (0.5, 0.016954108460353),
#     (0.8872983346207419, 0.21132486540518702),
#     (0.8872983346207419, 0.788675134594813),
#     (0.11270166537925802, 0.788675134594813),
#     (0.11270166537925802, 0.21132486540518702),
#     (0.5, 0.5),
# ]
# __________________________________________________________

# order 6
# WEIGHTS = [
#     0.358984421429088 / 4,
#     0.400330749583338 / 4,
#     0.245001957921212 / 4,
#     0.185989036700910 / 4,
#     0.711781890878518 / 4,
#     0.315514082613200 / 4,
#     0.611480498232472 / 4,
#     0.295643589435919 / 4,
#     0.158249356212716 / 4,
#     0.190499904161117 / 4,
#     0.526524512831510 / 4,
# ]

# POINTS = [
#     (0.5390238089456578, 0.942863834276723),
#     (0.3529230806298629, 0.15193960467776402),
#     (0.9694761384095756, 0.2832903943160435),
#     (0.9413639966081451, 0.8966162194410795),
#     (0.3204295002090546, 0.6178069522271405),
#     (0.04875481648642399, 0.381416698788379),
#     (0.7889632693081183, 0.6372541489355165),
#     (0.09679962892560123, 0.8836393973538335),
#     (0.12189603766199231, 0.043394581240735475),
#     (0.803393943796467, 0.021048278594159475),
#     (0.6186928000282739, 0.270944992469544),
# ]
# __________________________________________________________

# order 9

WEIGHTS = [
    0.4757005121518919,
    0.09505479105942961,
    0.3197748885567998,
    0.2507745913014616,
    0.2079897772657728,
    0.3825451498686515,
    0.1602716587299331,
    0.08896424693835600,
    0.08873672585441836,
    0.3944140639402363,
    0.2388303695959756,
    0.2076921051622470,
    0.04885243514495194,
    0.3195820179645928,
    0.08678706552131504,
    0.1736007064131520,
    0.1278903184977286,
    0.1010942075865585,
    0.1014514218845968,
    0.1299929465619316,
]


POINTS = [
    (0.5094564620437727, 0.48856266751859156),
    (0.8401857500408301, 0.02166500985281733),
    (0.8966618854308186, 0.42968848566658185),
    (0.7627466836345715, 0.758522200361109),
    (0.4351328426169807, 0.05023313845409261),
    (0.6887757104751168, 0.19872570129320444),
    (0.726768008924696, 0.7011613681166098),
    (0.9912705706056559, 0.7273437665924963),
    (0.008633097930027922, 0.2724568847457497),
    (0.24863765135228033, 0.2590177069130297),
    (0.34094103383937147, 0.7665427662012889),
    (0.564912499961489, 0.9498462032962762),
    (0.38611791427228237, 0.5222249137286638),
    (0.1033199059216095, 0.5697942124453409),
    (0.15687088493752432, 0.9815976643316848),
    (0.2808784793919611, 0.8376296300689233),
    (0.9063315146049481, 0.94564923549236),
    (0.9723968930123228, 0.1404602422745147),
    (0.027731636360746603, 0.859255796130039),
    (0.09422703160835494, 0.054978188032025976),
]


def get_det_jacob(jacobian: npt.NDArray[np.float64]) -> float:
    det: float = jacobian[0][0] * jacobian[1][1] - jacobian[0][1] * jacobian[1][0]
    return det


def integral_a(
    jacobian: Callable[[float, float], npt.NDArray[np.float64]],
    grad_sf_k: Callable[[float, float], npt.NDArray[np.float64]],
    grad_sf_j: Callable[[float, float], npt.NDArray[np.float64]],
) -> float:
    integral_sum = 0
    for i, weight in enumerate(WEIGHTS):
        inv_jacob = np.linalg.inv(jacobian(POINTS[i][0], POINTS[i][1]))
        jac_det = get_det_jacob(jacobian(POINTS[i][0], POINTS[i][1]))
        partial_sum = (
            weight
            * np.dot(
                grad_sf_k(POINTS[i][0], POINTS[i][1]),
                np.dot(
                    np.dot(inv_jacob, inv_jacob.T),
                    grad_sf_j(POINTS[i][0], POINTS[i][1]).T,
                ),
            )
            * abs(jac_det)
        )
        integral_sum += partial_sum
    integral = integral_sum
    return integral


def integral_b(
    jacobian: Callable[[float, float], npt.NDArray[np.float64]],
    sf_k: Callable[[float, float], float],
    grad_sf_j: Callable[[float, float], npt.NDArray[np.float64]],
    component: int,
) -> float:
    integral_sum = 0
    for s, weight in enumerate(WEIGHTS):
        inv_jacob = np.linalg.inv(jacobian(POINTS[s][0], POINTS[s][1]))
        jac_det = get_det_jacob(jacobian(POINTS[s][0], POINTS[s][1]))
        partial_sum = (
            weight
            * sf_k(POINTS[s][0], POINTS[s][1])
            * (
                np.dot(
                    inv_jacob[:, component],
                    grad_sf_j(POINTS[s][0], POINTS[s][1]),
                )
            )
            * abs(jac_det)
        )
        integral_sum += partial_sum
    integral = -1 * integral_sum
    return integral
