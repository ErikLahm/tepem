import numpy as np
import numpy.typing as npt


def phi_0(x: float, y: float) -> float:
    return (
        1.0
        * y
        * (x - 1)
        * (2.0 * x - 1.0)
        * (
            -32.0 * y**3
            + 75.3137084989848 * y**2
            - 56.9705627484771 * y
            + 13.6568542494924
        )
    )


def phi_1(x: float, y: float) -> float:
    return (
        4.0
        * y
        * (x - 1)
        * (2.0 * x - 1.0)
        * (y - 1)
        * (2.82842712474619 * y - 2.41421356237309)
        * (2.82842712474619 * y - 0.414213562373095)
    )


def phi_2(x: float, y: float) -> float:
    return (
        1.0
        * y
        * (x - 1)
        * (2.0 * x - 1.0)
        * (
            -32.0 * y**3
            + 52.6862915010152 * y**2
            - 23.0294372515229 * y
            + 2.34314575050762
        )
    )


def phi_3(x: float, y: float) -> float:
    return (
        4.0
        * x
        * y
        * (1 - x)
        * (
            -32.0 * y**3
            + 75.3137084989848 * y**2
            - 56.9705627484771 * y
            + 13.6568542494924
        )
    )


def phi_4(x: float, y: float) -> float:
    return (
        16.0
        * x
        * y
        * (1 - x)
        * (y - 1)
        * (2.82842712474619 * y - 2.41421356237309)
        * (2.82842712474619 * y - 0.414213562373095)
    )


def phi_5(x: float, y: float) -> float:
    return (
        4.0
        * x
        * y
        * (1 - x)
        * (
            -32.0 * y**3
            + 52.6862915010152 * y**2
            - 23.0294372515229 * y
            + 2.34314575050762
        )
    )


def phi_6(x: float, y: float) -> float:
    return (
        x
        * y
        * (2.0 * x - 1.0)
        * (
            -32.0 * y**3
            + 75.3137084989848 * y**2
            - 56.9705627484771 * y
            + 13.6568542494924
        )
    )


def phi_7(x: float, y: float) -> float:
    return (
        4.0
        * x
        * y
        * (2.0 * x - 1.0)
        * (y - 1)
        * (2.82842712474619 * y - 2.41421356237309)
        * (2.82842712474619 * y - 0.414213562373095)
    )


def phi_8(x: float, y: float) -> float:
    return (
        x
        * y
        * (2.0 * x - 1.0)
        * (
            -32.0 * y**3
            + 52.6862915010152 * y**2
            - 23.0294372515229 * y
            + 2.34314575050762
        )
    )


def grad_phi_0(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = 2.0 * y * (x - 1) * (
        -32.0 * y**3
        + 75.3137084989848 * y**2
        - 56.9705627484771 * y
        + 13.6568542494924
    ) + 1.0 * y * (2.0 * x - 1.0) * (
        -32.0 * y**3
        + 75.3137084989848 * y**2
        - 56.9705627484771 * y
        + 13.6568542494924
    )
    phi_dy = 1.0 * y * (x - 1) * (2.0 * x - 1.0) * (
        -96.0 * y**2 + 150.62741699797 * y - 56.9705627484771
    ) + 1.0 * (x - 1) * (2.0 * x - 1.0) * (
        -32.0 * y**3
        + 75.3137084989848 * y**2
        - 56.9705627484771 * y
        + 13.6568542494924
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_1(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = 8.0 * y * (x - 1) * (y - 1) * (2.82842712474619 * y - 2.41421356237309) * (
        2.82842712474619 * y - 0.414213562373095
    ) + 4.0 * y * (2.0 * x - 1.0) * (y - 1) * (
        2.82842712474619 * y - 2.41421356237309
    ) * (
        2.82842712474619 * y - 0.414213562373095
    )
    phi_dy = (
        11.3137084989848
        * y
        * (x - 1)
        * (2.0 * x - 1.0)
        * (y - 1)
        * (2.82842712474619 * y - 2.41421356237309)
        + 11.3137084989848
        * y
        * (x - 1)
        * (2.0 * x - 1.0)
        * (y - 1)
        * (2.82842712474619 * y - 0.414213562373095)
        + 4.0
        * y
        * (x - 1)
        * (2.0 * x - 1.0)
        * (2.82842712474619 * y - 2.41421356237309)
        * (2.82842712474619 * y - 0.414213562373095)
        + 4.0
        * (x - 1)
        * (2.0 * x - 1.0)
        * (y - 1)
        * (2.82842712474619 * y - 2.41421356237309)
        * (2.82842712474619 * y - 0.414213562373095)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_2(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = 2.0 * y * (x - 1) * (
        -32.0 * y**3
        + 52.6862915010152 * y**2
        - 23.0294372515229 * y
        + 2.34314575050762
    ) + 1.0 * y * (2.0 * x - 1.0) * (
        -32.0 * y**3
        + 52.6862915010152 * y**2
        - 23.0294372515229 * y
        + 2.34314575050762
    )
    phi_dy = 1.0 * y * (x - 1) * (2.0 * x - 1.0) * (
        -96.0 * y**2 + 105.37258300203 * y - 23.0294372515229
    ) + 1.0 * (x - 1) * (2.0 * x - 1.0) * (
        -32.0 * y**3
        + 52.6862915010152 * y**2
        - 23.0294372515229 * y
        + 2.34314575050762
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_3(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = -4.0 * x * y * (
        -32.0 * y**3
        + 75.3137084989848 * y**2
        - 56.9705627484771 * y
        + 13.6568542494924
    ) + 4.0 * y * (1 - x) * (
        -32.0 * y**3
        + 75.3137084989848 * y**2
        - 56.9705627484771 * y
        + 13.6568542494924
    )
    phi_dy = 4.0 * x * y * (1 - x) * (
        -96.0 * y**2 + 150.62741699797 * y - 56.9705627484771
    ) + 4.0 * x * (1 - x) * (
        -32.0 * y**3
        + 75.3137084989848 * y**2
        - 56.9705627484771 * y
        + 13.6568542494924
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_4(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = -16.0 * x * y * (y - 1) * (2.82842712474619 * y - 2.41421356237309) * (
        2.82842712474619 * y - 0.414213562373095
    ) + 16.0 * y * (1 - x) * (y - 1) * (2.82842712474619 * y - 2.41421356237309) * (
        2.82842712474619 * y - 0.414213562373095
    )
    phi_dy = (
        45.2548339959391
        * x
        * y
        * (1 - x)
        * (y - 1)
        * (2.82842712474619 * y - 2.41421356237309)
        + 45.2548339959391
        * x
        * y
        * (1 - x)
        * (y - 1)
        * (2.82842712474619 * y - 0.414213562373095)
        + 16.0
        * x
        * y
        * (1 - x)
        * (2.82842712474619 * y - 2.41421356237309)
        * (2.82842712474619 * y - 0.414213562373095)
        + 16.0
        * x
        * (1 - x)
        * (y - 1)
        * (2.82842712474619 * y - 2.41421356237309)
        * (2.82842712474619 * y - 0.414213562373095)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_5(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = -4.0 * x * y * (
        -32.0 * y**3
        + 52.6862915010152 * y**2
        - 23.0294372515229 * y
        + 2.34314575050762
    ) + 4.0 * y * (1 - x) * (
        -32.0 * y**3
        + 52.6862915010152 * y**2
        - 23.0294372515229 * y
        + 2.34314575050762
    )
    phi_dy = 4.0 * x * y * (1 - x) * (
        -96.0 * y**2 + 105.37258300203 * y - 23.0294372515229
    ) + 4.0 * x * (1 - x) * (
        -32.0 * y**3
        + 52.6862915010152 * y**2
        - 23.0294372515229 * y
        + 2.34314575050762
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_6(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = 2.0 * x * y * (
        -32.0 * y**3
        + 75.3137084989848 * y**2
        - 56.9705627484771 * y
        + 13.6568542494924
    ) + y * (2.0 * x - 1.0) * (
        -32.0 * y**3
        + 75.3137084989848 * y**2
        - 56.9705627484771 * y
        + 13.6568542494924
    )
    phi_dy = x * y * (2.0 * x - 1.0) * (
        -96.0 * y**2 + 150.62741699797 * y - 56.9705627484771
    ) + x * (2.0 * x - 1.0) * (
        -32.0 * y**3
        + 75.3137084989848 * y**2
        - 56.9705627484771 * y
        + 13.6568542494924
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_7(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = 8.0 * x * y * (y - 1) * (2.82842712474619 * y - 2.41421356237309) * (
        2.82842712474619 * y - 0.414213562373095
    ) + 4.0 * y * (2.0 * x - 1.0) * (y - 1) * (
        2.82842712474619 * y - 2.41421356237309
    ) * (
        2.82842712474619 * y - 0.414213562373095
    )
    phi_dy = (
        11.3137084989848
        * x
        * y
        * (2.0 * x - 1.0)
        * (y - 1)
        * (2.82842712474619 * y - 2.41421356237309)
        + 11.3137084989848
        * x
        * y
        * (2.0 * x - 1.0)
        * (y - 1)
        * (2.82842712474619 * y - 0.414213562373095)
        + 4.0
        * x
        * y
        * (2.0 * x - 1.0)
        * (2.82842712474619 * y - 2.41421356237309)
        * (2.82842712474619 * y - 0.414213562373095)
        + 4.0
        * x
        * (2.0 * x - 1.0)
        * (y - 1)
        * (2.82842712474619 * y - 2.41421356237309)
        * (2.82842712474619 * y - 0.414213562373095)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_8(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = 2.0 * x * y * (
        -32.0 * y**3
        + 52.6862915010152 * y**2
        - 23.0294372515229 * y
        + 2.34314575050762
    ) + y * (2.0 * x - 1.0) * (
        -32.0 * y**3
        + 52.6862915010152 * y**2
        - 23.0294372515229 * y
        + 2.34314575050762
    )
    phi_dy = x * y * (2.0 * x - 1.0) * (
        -96.0 * y**2 + 105.37258300203 * y - 23.0294372515229
    ) + x * (2.0 * x - 1.0) * (
        -32.0 * y**3
        + 52.6862915010152 * y**2
        - 23.0294372515229 * y
        + 2.34314575050762
    )
    return np.array([phi_dx, phi_dy])


Q24_SF_CHEB_LIST = [phi_0, phi_1, phi_2, phi_3, phi_4, phi_5, phi_6, phi_7, phi_8]

Q24_GRAD_SF_CHEB_LIST = [
    grad_phi_0,
    grad_phi_1,
    grad_phi_2,
    grad_phi_3,
    grad_phi_4,
    grad_phi_5,
    grad_phi_6,
    grad_phi_7,
    grad_phi_8,
]
