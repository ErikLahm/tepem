import numpy as np
import numpy.typing as npt


def phi_0(x: float, y: float) -> float:
    return (
        11.5777087639997
        * y
        * (x - 1)
        * (2.0 * x - 1.0)
        * (y - 1)
        * (1.23606797749979 * y - 1.11803398874989)
        * (1.78885438199983 * y - 1.17082039324994)
        * (4.0 * y - 1.38196601125011)
    )


def phi_1(x: float, y: float) -> float:
    return (
        1.0
        * y
        * (x - 1)
        * (2.0 * x - 1.0)
        * (
            -102.4 * y**4
            + 271.821670111997 * y**3
            - 245.287922695995 * y**2
            + 81.6551069659978 * y
            - 5.78885438199983
        )
    )


def phi_2(x: float, y: float) -> float:
    return (
        4.42229123600034
        * y
        * (x - 1)
        * (2.0 * x - 1.0)
        * (y - 1)
        * (1.78885438199983 * y - 0.170820393249937)
        * (3.23606797749979 * y - 1.11803398874989)
        * (4.0 * y - 3.61803398874989)
    )


def phi_3(x: float, y: float) -> float:
    return (
        1.0
        * y
        * (x - 1)
        * (2.0 * x - 1.0)
        * (
            -102.4 * y**4
            + 214.578329888003 * y**3
            - 145.112077304005 * y**2
            + 35.1448930340022 * y
            - 2.21114561800017
        )
    )


def phi_4(x: float, y: float) -> float:
    return (
        46.3108350559987
        * x
        * y
        * (1 - x)
        * (y - 1)
        * (1.23606797749979 * y - 1.11803398874989)
        * (1.78885438199983 * y - 1.17082039324994)
        * (4.0 * y - 1.38196601125011)
    )


def phi_5(x: float, y: float) -> float:
    return (
        4.0
        * x
        * y
        * (1 - x)
        * (
            -102.4 * y**4
            + 271.821670111997 * y**3
            - 245.287922695995 * y**2
            + 81.6551069659978 * y
            - 5.78885438199983
        )
    )


def phi_6(x: float, y: float) -> float:
    return (
        17.6891649440014
        * x
        * y
        * (1 - x)
        * (y - 1)
        * (1.78885438199983 * y - 0.170820393249937)
        * (3.23606797749979 * y - 1.11803398874989)
        * (4.0 * y - 3.61803398874989)
    )


def phi_7(x: float, y: float) -> float:
    return (
        4.0
        * x
        * y
        * (1 - x)
        * (
            -102.4 * y**4
            + 214.578329888003 * y**3
            - 145.112077304005 * y**2
            + 35.1448930340022 * y
            - 2.21114561800017
        )
    )


def phi_8(x: float, y: float) -> float:
    return (
        11.5777087639997
        * x
        * y
        * (2.0 * x - 1.0)
        * (y - 1)
        * (1.23606797749979 * y - 1.11803398874989)
        * (1.78885438199983 * y - 1.17082039324994)
        * (4.0 * y - 1.38196601125011)
    )


def phi_9(x: float, y: float) -> float:
    return (
        x
        * y
        * (2.0 * x - 1.0)
        * (
            -102.4 * y**4
            + 271.821670111997 * y**3
            - 245.287922695995 * y**2
            + 81.6551069659978 * y
            - 5.78885438199983
        )
    )


def phi_10(x: float, y: float) -> float:
    return (
        4.42229123600034
        * x
        * y
        * (2.0 * x - 1.0)
        * (y - 1)
        * (1.78885438199983 * y - 0.170820393249937)
        * (3.23606797749979 * y - 1.11803398874989)
        * (4.0 * y - 3.61803398874989)
    )


def phi_11(x: float, y: float) -> float:
    return (
        x
        * y
        * (2.0 * x - 1.0)
        * (
            -102.4 * y**4
            + 214.578329888003 * y**3
            - 145.112077304005 * y**2
            + 35.1448930340022 * y
            - 2.21114561800017
        )
    )


def grad_phi_0(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = 23.1554175279993 * y * (x - 1) * (y - 1) * (
        1.23606797749979 * y - 1.11803398874989
    ) * (1.78885438199983 * y - 1.17082039324994) * (
        4.0 * y - 1.38196601125011
    ) + 11.5777087639997 * y * (
        2.0 * x - 1.0
    ) * (
        y - 1
    ) * (
        1.23606797749979 * y - 1.11803398874989
    ) * (
        1.78885438199983 * y - 1.17082039324994
    ) * (
        4.0 * y - 1.38196601125011
    )
    phi_dy = (
        46.3108350559987
        * y
        * (x - 1)
        * (2.0 * x - 1.0)
        * (y - 1)
        * (1.23606797749979 * y - 1.11803398874989)
        * (1.78885438199983 * y - 1.17082039324994)
        + 20.7108350559987
        * y
        * (x - 1)
        * (2.0 * x - 1.0)
        * (y - 1)
        * (1.23606797749979 * y - 1.11803398874989)
        * (4.0 * y - 1.38196601125011)
        + 14.3108350559987
        * y
        * (x - 1)
        * (2.0 * x - 1.0)
        * (y - 1)
        * (1.78885438199983 * y - 1.17082039324994)
        * (4.0 * y - 1.38196601125011)
        + 11.5777087639997
        * y
        * (x - 1)
        * (2.0 * x - 1.0)
        * (1.23606797749979 * y - 1.11803398874989)
        * (1.78885438199983 * y - 1.17082039324994)
        * (4.0 * y - 1.38196601125011)
        + 11.5777087639997
        * (x - 1)
        * (2.0 * x - 1.0)
        * (y - 1)
        * (1.23606797749979 * y - 1.11803398874989)
        * (1.78885438199983 * y - 1.17082039324994)
        * (4.0 * y - 1.38196601125011)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_1(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = 2.0 * y * (x - 1) * (
        -102.4 * y**4
        + 271.821670111997 * y**3
        - 245.287922695995 * y**2
        + 81.6551069659978 * y
        - 5.78885438199983
    ) + 1.0 * y * (2.0 * x - 1.0) * (
        -102.4 * y**4
        + 271.821670111997 * y**3
        - 245.287922695995 * y**2
        + 81.6551069659978 * y
        - 5.78885438199983
    )
    phi_dy = 1.0 * y * (x - 1) * (2.0 * x - 1.0) * (
        -409.6 * y**3
        + 815.465010335992 * y**2
        - 490.575845391991 * y
        + 81.6551069659978
    ) + 1.0 * (x - 1) * (2.0 * x - 1.0) * (
        -102.4 * y**4
        + 271.821670111997 * y**3
        - 245.287922695995 * y**2
        + 81.6551069659978 * y
        - 5.78885438199983
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_2(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = 8.84458247200068 * y * (x - 1) * (y - 1) * (
        1.78885438199983 * y - 0.170820393249937
    ) * (3.23606797749979 * y - 1.11803398874989) * (
        4.0 * y - 3.61803398874989
    ) + 4.42229123600034 * y * (
        2.0 * x - 1.0
    ) * (
        y - 1
    ) * (
        1.78885438199983 * y - 0.170820393249937
    ) * (
        3.23606797749979 * y - 1.11803398874989
    ) * (
        4.0 * y - 3.61803398874989
    )
    phi_dy = (
        17.6891649440013
        * y
        * (x - 1)
        * (2.0 * x - 1.0)
        * (y - 1)
        * (1.78885438199983 * y - 0.170820393249937)
        * (3.23606797749979 * y - 1.11803398874989)
        + 14.3108350559987
        * y
        * (x - 1)
        * (2.0 * x - 1.0)
        * (y - 1)
        * (1.78885438199983 * y - 0.170820393249937)
        * (4.0 * y - 3.61803398874989)
        + 7.91083505599866
        * y
        * (x - 1)
        * (2.0 * x - 1.0)
        * (y - 1)
        * (3.23606797749979 * y - 1.11803398874989)
        * (4.0 * y - 3.61803398874989)
        + 4.42229123600034
        * y
        * (x - 1)
        * (2.0 * x - 1.0)
        * (1.78885438199983 * y - 0.170820393249937)
        * (3.23606797749979 * y - 1.11803398874989)
        * (4.0 * y - 3.61803398874989)
        + 4.42229123600034
        * (x - 1)
        * (2.0 * x - 1.0)
        * (y - 1)
        * (1.78885438199983 * y - 0.170820393249937)
        * (3.23606797749979 * y - 1.11803398874989)
        * (4.0 * y - 3.61803398874989)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_3(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = 2.0 * y * (x - 1) * (
        -102.4 * y**4
        + 214.578329888003 * y**3
        - 145.112077304005 * y**2
        + 35.1448930340022 * y
        - 2.21114561800017
    ) + 1.0 * y * (2.0 * x - 1.0) * (
        -102.4 * y**4
        + 214.578329888003 * y**3
        - 145.112077304005 * y**2
        + 35.1448930340022 * y
        - 2.21114561800017
    )
    phi_dy = 1.0 * y * (x - 1) * (2.0 * x - 1.0) * (
        -409.6 * y**3
        + 643.734989664008 * y**2
        - 290.224154608009 * y
        + 35.1448930340022
    ) + 1.0 * (x - 1) * (2.0 * x - 1.0) * (
        -102.4 * y**4
        + 214.578329888003 * y**3
        - 145.112077304005 * y**2
        + 35.1448930340022 * y
        - 2.21114561800017
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_4(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = -46.3108350559987 * x * y * (y - 1) * (
        1.23606797749979 * y - 1.11803398874989
    ) * (1.78885438199983 * y - 1.17082039324994) * (
        4.0 * y - 1.38196601125011
    ) + 46.3108350559987 * y * (
        1 - x
    ) * (
        y - 1
    ) * (
        1.23606797749979 * y - 1.11803398874989
    ) * (
        1.78885438199983 * y - 1.17082039324994
    ) * (
        4.0 * y - 1.38196601125011
    )
    phi_dy = (
        185.243340223995
        * x
        * y
        * (1 - x)
        * (y - 1)
        * (1.23606797749979 * y - 1.11803398874989)
        * (1.78885438199983 * y - 1.17082039324994)
        + 82.8433402239946
        * x
        * y
        * (1 - x)
        * (y - 1)
        * (1.23606797749979 * y - 1.11803398874989)
        * (4.0 * y - 1.38196601125011)
        + 57.2433402239946
        * x
        * y
        * (1 - x)
        * (y - 1)
        * (1.78885438199983 * y - 1.17082039324994)
        * (4.0 * y - 1.38196601125011)
        + 46.3108350559987
        * x
        * y
        * (1 - x)
        * (1.23606797749979 * y - 1.11803398874989)
        * (1.78885438199983 * y - 1.17082039324994)
        * (4.0 * y - 1.38196601125011)
        + 46.3108350559987
        * x
        * (1 - x)
        * (y - 1)
        * (1.23606797749979 * y - 1.11803398874989)
        * (1.78885438199983 * y - 1.17082039324994)
        * (4.0 * y - 1.38196601125011)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_5(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = -4.0 * x * y * (
        -102.4 * y**4
        + 271.821670111997 * y**3
        - 245.287922695995 * y**2
        + 81.6551069659978 * y
        - 5.78885438199983
    ) + 4.0 * y * (1 - x) * (
        -102.4 * y**4
        + 271.821670111997 * y**3
        - 245.287922695995 * y**2
        + 81.6551069659978 * y
        - 5.78885438199983
    )
    phi_dy = 4.0 * x * y * (1 - x) * (
        -409.6 * y**3
        + 815.465010335992 * y**2
        - 490.575845391991 * y
        + 81.6551069659978
    ) + 4.0 * x * (1 - x) * (
        -102.4 * y**4
        + 271.821670111997 * y**3
        - 245.287922695995 * y**2
        + 81.6551069659978 * y
        - 5.78885438199983
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_6(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = -17.6891649440014 * x * y * (y - 1) * (
        1.78885438199983 * y - 0.170820393249937
    ) * (3.23606797749979 * y - 1.11803398874989) * (
        4.0 * y - 3.61803398874989
    ) + 17.6891649440014 * y * (
        1 - x
    ) * (
        y - 1
    ) * (
        1.78885438199983 * y - 0.170820393249937
    ) * (
        3.23606797749979 * y - 1.11803398874989
    ) * (
        4.0 * y - 3.61803398874989
    )
    phi_dy = (
        70.7566597760054
        * x
        * y
        * (1 - x)
        * (y - 1)
        * (1.78885438199983 * y - 0.170820393249937)
        * (3.23606797749979 * y - 1.11803398874989)
        + 57.2433402239946
        * x
        * y
        * (1 - x)
        * (y - 1)
        * (1.78885438199983 * y - 0.170820393249937)
        * (4.0 * y - 3.61803398874989)
        + 31.6433402239946
        * x
        * y
        * (1 - x)
        * (y - 1)
        * (3.23606797749979 * y - 1.11803398874989)
        * (4.0 * y - 3.61803398874989)
        + 17.6891649440014
        * x
        * y
        * (1 - x)
        * (1.78885438199983 * y - 0.170820393249937)
        * (3.23606797749979 * y - 1.11803398874989)
        * (4.0 * y - 3.61803398874989)
        + 17.6891649440014
        * x
        * (1 - x)
        * (y - 1)
        * (1.78885438199983 * y - 0.170820393249937)
        * (3.23606797749979 * y - 1.11803398874989)
        * (4.0 * y - 3.61803398874989)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_7(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = -4.0 * x * y * (
        -102.4 * y**4
        + 214.578329888003 * y**3
        - 145.112077304005 * y**2
        + 35.1448930340022 * y
        - 2.21114561800017
    ) + 4.0 * y * (1 - x) * (
        -102.4 * y**4
        + 214.578329888003 * y**3
        - 145.112077304005 * y**2
        + 35.1448930340022 * y
        - 2.21114561800017
    )
    phi_dy = 4.0 * x * y * (1 - x) * (
        -409.6 * y**3
        + 643.734989664008 * y**2
        - 290.224154608009 * y
        + 35.1448930340022
    ) + 4.0 * x * (1 - x) * (
        -102.4 * y**4
        + 214.578329888003 * y**3
        - 145.112077304005 * y**2
        + 35.1448930340022 * y
        - 2.21114561800017
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_8(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = 23.1554175279993 * x * y * (y - 1) * (
        1.23606797749979 * y - 1.11803398874989
    ) * (1.78885438199983 * y - 1.17082039324994) * (
        4.0 * y - 1.38196601125011
    ) + 11.5777087639997 * y * (
        2.0 * x - 1.0
    ) * (
        y - 1
    ) * (
        1.23606797749979 * y - 1.11803398874989
    ) * (
        1.78885438199983 * y - 1.17082039324994
    ) * (
        4.0 * y - 1.38196601125011
    )
    phi_dy = (
        46.3108350559987
        * x
        * y
        * (2.0 * x - 1.0)
        * (y - 1)
        * (1.23606797749979 * y - 1.11803398874989)
        * (1.78885438199983 * y - 1.17082039324994)
        + 20.7108350559987
        * x
        * y
        * (2.0 * x - 1.0)
        * (y - 1)
        * (1.23606797749979 * y - 1.11803398874989)
        * (4.0 * y - 1.38196601125011)
        + 14.3108350559987
        * x
        * y
        * (2.0 * x - 1.0)
        * (y - 1)
        * (1.78885438199983 * y - 1.17082039324994)
        * (4.0 * y - 1.38196601125011)
        + 11.5777087639997
        * x
        * y
        * (2.0 * x - 1.0)
        * (1.23606797749979 * y - 1.11803398874989)
        * (1.78885438199983 * y - 1.17082039324994)
        * (4.0 * y - 1.38196601125011)
        + 11.5777087639997
        * x
        * (2.0 * x - 1.0)
        * (y - 1)
        * (1.23606797749979 * y - 1.11803398874989)
        * (1.78885438199983 * y - 1.17082039324994)
        * (4.0 * y - 1.38196601125011)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_9(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = 2.0 * x * y * (
        -102.4 * y**4
        + 271.821670111997 * y**3
        - 245.287922695995 * y**2
        + 81.6551069659978 * y
        - 5.78885438199983
    ) + y * (2.0 * x - 1.0) * (
        -102.4 * y**4
        + 271.821670111997 * y**3
        - 245.287922695995 * y**2
        + 81.6551069659978 * y
        - 5.78885438199983
    )
    phi_dy = x * y * (2.0 * x - 1.0) * (
        -409.6 * y**3
        + 815.465010335992 * y**2
        - 490.575845391991 * y
        + 81.6551069659978
    ) + x * (2.0 * x - 1.0) * (
        -102.4 * y**4
        + 271.821670111997 * y**3
        - 245.287922695995 * y**2
        + 81.6551069659978 * y
        - 5.78885438199983
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_10(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = 8.84458247200067 * x * y * (y - 1) * (
        1.78885438199983 * y - 0.170820393249937
    ) * (3.23606797749979 * y - 1.11803398874989) * (
        4.0 * y - 3.61803398874989
    ) + 4.42229123600034 * y * (
        2.0 * x - 1.0
    ) * (
        y - 1
    ) * (
        1.78885438199983 * y - 0.170820393249937
    ) * (
        3.23606797749979 * y - 1.11803398874989
    ) * (
        4.0 * y - 3.61803398874989
    )
    phi_dy = (
        17.6891649440013
        * x
        * y
        * (2.0 * x - 1.0)
        * (y - 1)
        * (1.78885438199983 * y - 0.170820393249937)
        * (3.23606797749979 * y - 1.11803398874989)
        + 14.3108350559987
        * x
        * y
        * (2.0 * x - 1.0)
        * (y - 1)
        * (1.78885438199983 * y - 0.170820393249937)
        * (4.0 * y - 3.61803398874989)
        + 7.91083505599866
        * x
        * y
        * (2.0 * x - 1.0)
        * (y - 1)
        * (3.23606797749979 * y - 1.11803398874989)
        * (4.0 * y - 3.61803398874989)
        + 4.42229123600034
        * x
        * y
        * (2.0 * x - 1.0)
        * (1.78885438199983 * y - 0.170820393249937)
        * (3.23606797749979 * y - 1.11803398874989)
        * (4.0 * y - 3.61803398874989)
        + 4.42229123600034
        * x
        * (2.0 * x - 1.0)
        * (y - 1)
        * (1.78885438199983 * y - 0.170820393249937)
        * (3.23606797749979 * y - 1.11803398874989)
        * (4.0 * y - 3.61803398874989)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_11(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = 2.0 * x * y * (
        -102.4 * y**4
        + 214.578329888003 * y**3
        - 145.112077304005 * y**2
        + 35.1448930340022 * y
        - 2.21114561800017
    ) + y * (2.0 * x - 1.0) * (
        -102.4 * y**4
        + 214.578329888003 * y**3
        - 145.112077304005 * y**2
        + 35.1448930340022 * y
        - 2.21114561800017
    )
    phi_dy = x * y * (2.0 * x - 1.0) * (
        -409.6 * y**3
        + 643.734989664008 * y**2
        - 290.224154608009 * y
        + 35.1448930340022
    ) + x * (2.0 * x - 1.0) * (
        -102.4 * y**4
        + 214.578329888003 * y**3
        - 145.112077304005 * y**2
        + 35.1448930340022 * y
        - 2.21114561800017
    )
    return np.array([phi_dx, phi_dy])


Q25_SF_CHEB_LIST = [
    phi_0,
    phi_1,
    phi_2,
    phi_3,
    phi_4,
    phi_5,
    phi_6,
    phi_7,
    phi_8,
    phi_9,
    phi_10,
    phi_11,
]

Q25_GRAD_SF_CHEB_LIST = [
    grad_phi_0,
    grad_phi_1,
    grad_phi_2,
    grad_phi_3,
    grad_phi_4,
    grad_phi_5,
    grad_phi_6,
    grad_phi_7,
    grad_phi_8,
    grad_phi_9,
    grad_phi_10,
    grad_phi_11,
]
