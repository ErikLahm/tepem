import numpy as np
import numpy.typing as npt


def phi_0(x: float, y: float) -> float:
    return (
        8.16666666666667
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (1.4 * y - 1.2)
        * (1.75 * y - 1.25)
        * (2.33333333333333 * y - 1.33333333333333)
        * (3.5 * y - 1.5)
        * (7.0 * y - 2.0)
    )


def phi_1(x: float, y: float) -> float:
    return (
        y
        * (1.0 - 1.0 * x)
        * (
            -3431.42916666667 * y**6
            + 12745.3083333333 * y**5
            - 18907.875 * y**4
            + 14205.9166666667 * y**3
            - 5615.19583333333 * y**2
            + 1076.775 * y
            - 73.5
        )
    )


def phi_2(x: float, y: float) -> float:
    return (
        4.08333333333333
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (2.33333333333333 * y - 2.0)
        * (3.5 * y - 0.5)
        * (3.5 * y - 2.5)
        * (7.0 * y - 4.0)
        * (7.0 * y - 2.0)
    )


def phi_3(x: float, y: float) -> float:
    return (
        y
        * (1.0 - 1.0 * x)
        * (
            -5719.04861111111 * y**6
            + 19608.1666666667 * y**5
            - 26377.6527777778 * y**4
            + 17607.3333333333 * y**3
            - 6062.04861111111 * y**2
            + 1004.5 * y
            - 61.25
        )
    )


def phi_4(x: float, y: float) -> float:
    return (
        4.9
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (1.75 * y - 0.25)
        * (2.33333333333333 * y - 0.666666666666667)
        * (3.5 * y - 1.5)
        * (7.0 * y - 6.0)
        * (7.0 * y - 4.0)
    )


def phi_5(x: float, y: float) -> float:
    return (
        y
        * (1.0 - 1.0 * x)
        * (
            -1143.80972222222 * y**6
            + 3594.83055555555 * y**5
            - 4435.18055555555 * y**4
            + 2734.47222222222 * y**3
            - 880.843055555555 * y**2
            + 138.697222222222 * y
            - 8.16666666666666
        )
    )


def phi_6(x: float, y: float) -> float:
    return (
        8.16666666666667
        * x
        * y
        * (y - 1)
        * (1.4 * y - 1.2)
        * (1.75 * y - 1.25)
        * (2.33333333333333 * y - 1.33333333333333)
        * (3.5 * y - 1.5)
        * (7.0 * y - 2.0)
    )


def phi_7(x: float, y: float) -> float:
    return (
        1.0
        * x
        * y
        * (
            -3431.42916666667 * y**6
            + 12745.3083333333 * y**5
            - 18907.875 * y**4
            + 14205.9166666667 * y**3
            - 5615.19583333333 * y**2
            + 1076.775 * y
            - 73.5
        )
    )


def phi_8(x: float, y: float) -> float:
    return (
        4.08333333333333
        * x
        * y
        * (y - 1)
        * (2.33333333333333 * y - 2.0)
        * (3.5 * y - 0.5)
        * (3.5 * y - 2.5)
        * (7.0 * y - 4.0)
        * (7.0 * y - 2.0)
    )


def phi_9(x: float, y: float) -> float:
    return (
        1.0
        * x
        * y
        * (
            -5719.04861111111 * y**6
            + 19608.1666666667 * y**5
            - 26377.6527777778 * y**4
            + 17607.3333333333 * y**3
            - 6062.04861111111 * y**2
            + 1004.5 * y
            - 61.25
        )
    )


def phi_10(x: float, y: float) -> float:
    return (
        4.9
        * x
        * y
        * (y - 1)
        * (1.75 * y - 0.25)
        * (2.33333333333333 * y - 0.666666666666667)
        * (3.5 * y - 1.5)
        * (7.0 * y - 6.0)
        * (7.0 * y - 4.0)
    )


def phi_11(x: float, y: float) -> float:
    return (
        1.0
        * x
        * y
        * (
            -1143.80972222222 * y**6
            + 3594.83055555555 * y**5
            - 4435.18055555555 * y**4
            + 2734.47222222222 * y**3
            - 880.843055555555 * y**2
            + 138.697222222222 * y
            - 8.16666666666666
        )
    )


def grad_phi_0(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        -8.16666666666667
        * y
        * (y - 1)
        * (1.4 * y - 1.2)
        * (1.75 * y - 1.25)
        * (2.33333333333333 * y - 1.33333333333333)
        * (3.5 * y - 1.5)
        * (7.0 * y - 2.0)
    )
    phi_dy = (
        57.1666666666667
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (1.4 * y - 1.2)
        * (1.75 * y - 1.25)
        * (2.33333333333333 * y - 1.33333333333333)
        * (3.5 * y - 1.5)
        + 28.5833333333333
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (1.4 * y - 1.2)
        * (1.75 * y - 1.25)
        * (2.33333333333333 * y - 1.33333333333333)
        * (7.0 * y - 2.0)
        + 19.0555555555556
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (1.4 * y - 1.2)
        * (1.75 * y - 1.25)
        * (3.5 * y - 1.5)
        * (7.0 * y - 2.0)
        + 14.2916666666667
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (1.4 * y - 1.2)
        * (2.33333333333333 * y - 1.33333333333333)
        * (3.5 * y - 1.5)
        * (7.0 * y - 2.0)
        + 11.4333333333333
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (1.75 * y - 1.25)
        * (2.33333333333333 * y - 1.33333333333333)
        * (3.5 * y - 1.5)
        * (7.0 * y - 2.0)
        + 8.16666666666667
        * y
        * (1.0 - 1.0 * x)
        * (1.4 * y - 1.2)
        * (1.75 * y - 1.25)
        * (2.33333333333333 * y - 1.33333333333333)
        * (3.5 * y - 1.5)
        * (7.0 * y - 2.0)
        + 8.16666666666667
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (1.4 * y - 1.2)
        * (1.75 * y - 1.25)
        * (2.33333333333333 * y - 1.33333333333333)
        * (3.5 * y - 1.5)
        * (7.0 * y - 2.0)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_1(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        -1.0
        * y
        * (
            -3431.42916666667 * y**6
            + 12745.3083333333 * y**5
            - 18907.875 * y**4
            + 14205.9166666667 * y**3
            - 5615.19583333333 * y**2
            + 1076.775 * y
            - 73.5
        )
    )
    phi_dy = y * (1.0 - 1.0 * x) * (
        -20588.575 * y**5
        + 63726.5416666667 * y**4
        - 75631.5 * y**3
        + 42617.75 * y**2
        - 11230.3916666667 * y
        + 1076.775
    ) + (1.0 - 1.0 * x) * (
        -3431.42916666667 * y**6
        + 12745.3083333333 * y**5
        - 18907.875 * y**4
        + 14205.9166666667 * y**3
        - 5615.19583333333 * y**2
        + 1076.775 * y
        - 73.5
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_2(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        -4.08333333333333
        * y
        * (y - 1)
        * (2.33333333333333 * y - 2.0)
        * (3.5 * y - 0.5)
        * (3.5 * y - 2.5)
        * (7.0 * y - 4.0)
        * (7.0 * y - 2.0)
    )
    phi_dy = (
        28.5833333333333
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (2.33333333333333 * y - 2.0)
        * (3.5 * y - 0.5)
        * (3.5 * y - 2.5)
        * (7.0 * y - 4.0)
        + 28.5833333333333
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (2.33333333333333 * y - 2.0)
        * (3.5 * y - 0.5)
        * (3.5 * y - 2.5)
        * (7.0 * y - 2.0)
        + 14.2916666666667
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (2.33333333333333 * y - 2.0)
        * (3.5 * y - 0.5)
        * (7.0 * y - 4.0)
        * (7.0 * y - 2.0)
        + 14.2916666666667
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (2.33333333333333 * y - 2.0)
        * (3.5 * y - 2.5)
        * (7.0 * y - 4.0)
        * (7.0 * y - 2.0)
        + 9.52777777777778
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (3.5 * y - 0.5)
        * (3.5 * y - 2.5)
        * (7.0 * y - 4.0)
        * (7.0 * y - 2.0)
        + 4.08333333333333
        * y
        * (1.0 - 1.0 * x)
        * (2.33333333333333 * y - 2.0)
        * (3.5 * y - 0.5)
        * (3.5 * y - 2.5)
        * (7.0 * y - 4.0)
        * (7.0 * y - 2.0)
        + 4.08333333333333
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (2.33333333333333 * y - 2.0)
        * (3.5 * y - 0.5)
        * (3.5 * y - 2.5)
        * (7.0 * y - 4.0)
        * (7.0 * y - 2.0)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_3(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        -1.0
        * y
        * (
            -5719.04861111111 * y**6
            + 19608.1666666667 * y**5
            - 26377.6527777778 * y**4
            + 17607.3333333333 * y**3
            - 6062.04861111111 * y**2
            + 1004.5 * y
            - 61.25
        )
    )
    phi_dy = y * (1.0 - 1.0 * x) * (
        -34314.2916666667 * y**5
        + 98040.8333333334 * y**4
        - 105510.611111111 * y**3
        + 52822.0 * y**2
        - 12124.0972222222 * y
        + 1004.5
    ) + (1.0 - 1.0 * x) * (
        -5719.04861111111 * y**6
        + 19608.1666666667 * y**5
        - 26377.6527777778 * y**4
        + 17607.3333333333 * y**3
        - 6062.04861111111 * y**2
        + 1004.5 * y
        - 61.25
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_4(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        -4.9
        * y
        * (y - 1)
        * (1.75 * y - 0.25)
        * (2.33333333333333 * y - 0.666666666666667)
        * (3.5 * y - 1.5)
        * (7.0 * y - 6.0)
        * (7.0 * y - 4.0)
    )
    phi_dy = (
        34.3
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (1.75 * y - 0.25)
        * (2.33333333333333 * y - 0.666666666666667)
        * (3.5 * y - 1.5)
        * (7.0 * y - 6.0)
        + 34.3
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (1.75 * y - 0.25)
        * (2.33333333333333 * y - 0.666666666666667)
        * (3.5 * y - 1.5)
        * (7.0 * y - 4.0)
        + 17.15
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (1.75 * y - 0.25)
        * (2.33333333333333 * y - 0.666666666666667)
        * (7.0 * y - 6.0)
        * (7.0 * y - 4.0)
        + 11.4333333333333
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (1.75 * y - 0.25)
        * (3.5 * y - 1.5)
        * (7.0 * y - 6.0)
        * (7.0 * y - 4.0)
        + 8.575
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (2.33333333333333 * y - 0.666666666666667)
        * (3.5 * y - 1.5)
        * (7.0 * y - 6.0)
        * (7.0 * y - 4.0)
        + 4.9
        * y
        * (1.0 - 1.0 * x)
        * (1.75 * y - 0.25)
        * (2.33333333333333 * y - 0.666666666666667)
        * (3.5 * y - 1.5)
        * (7.0 * y - 6.0)
        * (7.0 * y - 4.0)
        + 4.9
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (1.75 * y - 0.25)
        * (2.33333333333333 * y - 0.666666666666667)
        * (3.5 * y - 1.5)
        * (7.0 * y - 6.0)
        * (7.0 * y - 4.0)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_5(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        -1.0
        * y
        * (
            -1143.80972222222 * y**6
            + 3594.83055555555 * y**5
            - 4435.18055555555 * y**4
            + 2734.47222222222 * y**3
            - 880.843055555555 * y**2
            + 138.697222222222 * y
            - 8.16666666666666
        )
    )
    phi_dy = y * (1.0 - 1.0 * x) * (
        -6862.85833333333 * y**5
        + 17974.1527777778 * y**4
        - 17740.7222222222 * y**3
        + 8203.41666666666 * y**2
        - 1761.68611111111 * y
        + 138.697222222222
    ) + (1.0 - 1.0 * x) * (
        -1143.80972222222 * y**6
        + 3594.83055555555 * y**5
        - 4435.18055555555 * y**4
        + 2734.47222222222 * y**3
        - 880.843055555555 * y**2
        + 138.697222222222 * y
        - 8.16666666666666
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_6(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        8.16666666666667
        * y
        * (y - 1)
        * (1.4 * y - 1.2)
        * (1.75 * y - 1.25)
        * (2.33333333333333 * y - 1.33333333333333)
        * (3.5 * y - 1.5)
        * (7.0 * y - 2.0)
    )
    phi_dy = (
        57.1666666666667
        * x
        * y
        * (y - 1)
        * (1.4 * y - 1.2)
        * (1.75 * y - 1.25)
        * (2.33333333333333 * y - 1.33333333333333)
        * (3.5 * y - 1.5)
        + 28.5833333333333
        * x
        * y
        * (y - 1)
        * (1.4 * y - 1.2)
        * (1.75 * y - 1.25)
        * (2.33333333333333 * y - 1.33333333333333)
        * (7.0 * y - 2.0)
        + 19.0555555555556
        * x
        * y
        * (y - 1)
        * (1.4 * y - 1.2)
        * (1.75 * y - 1.25)
        * (3.5 * y - 1.5)
        * (7.0 * y - 2.0)
        + 14.2916666666667
        * x
        * y
        * (y - 1)
        * (1.4 * y - 1.2)
        * (2.33333333333333 * y - 1.33333333333333)
        * (3.5 * y - 1.5)
        * (7.0 * y - 2.0)
        + 11.4333333333333
        * x
        * y
        * (y - 1)
        * (1.75 * y - 1.25)
        * (2.33333333333333 * y - 1.33333333333333)
        * (3.5 * y - 1.5)
        * (7.0 * y - 2.0)
        + 8.16666666666667
        * x
        * y
        * (1.4 * y - 1.2)
        * (1.75 * y - 1.25)
        * (2.33333333333333 * y - 1.33333333333333)
        * (3.5 * y - 1.5)
        * (7.0 * y - 2.0)
        + 8.16666666666667
        * x
        * (y - 1)
        * (1.4 * y - 1.2)
        * (1.75 * y - 1.25)
        * (2.33333333333333 * y - 1.33333333333333)
        * (3.5 * y - 1.5)
        * (7.0 * y - 2.0)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_7(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        1.0
        * y
        * (
            -3431.42916666667 * y**6
            + 12745.3083333333 * y**5
            - 18907.875 * y**4
            + 14205.9166666667 * y**3
            - 5615.19583333333 * y**2
            + 1076.775 * y
            - 73.5
        )
    )
    phi_dy = 1.0 * x * y * (
        -20588.575 * y**5
        + 63726.5416666667 * y**4
        - 75631.5 * y**3
        + 42617.75 * y**2
        - 11230.3916666667 * y
        + 1076.775
    ) + 1.0 * x * (
        -3431.42916666667 * y**6
        + 12745.3083333333 * y**5
        - 18907.875 * y**4
        + 14205.9166666667 * y**3
        - 5615.19583333333 * y**2
        + 1076.775 * y
        - 73.5
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_8(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        4.08333333333333
        * y
        * (y - 1)
        * (2.33333333333333 * y - 2.0)
        * (3.5 * y - 0.5)
        * (3.5 * y - 2.5)
        * (7.0 * y - 4.0)
        * (7.0 * y - 2.0)
    )
    phi_dy = (
        28.5833333333333
        * x
        * y
        * (y - 1)
        * (2.33333333333333 * y - 2.0)
        * (3.5 * y - 0.5)
        * (3.5 * y - 2.5)
        * (7.0 * y - 4.0)
        + 28.5833333333333
        * x
        * y
        * (y - 1)
        * (2.33333333333333 * y - 2.0)
        * (3.5 * y - 0.5)
        * (3.5 * y - 2.5)
        * (7.0 * y - 2.0)
        + 14.2916666666667
        * x
        * y
        * (y - 1)
        * (2.33333333333333 * y - 2.0)
        * (3.5 * y - 0.5)
        * (7.0 * y - 4.0)
        * (7.0 * y - 2.0)
        + 14.2916666666667
        * x
        * y
        * (y - 1)
        * (2.33333333333333 * y - 2.0)
        * (3.5 * y - 2.5)
        * (7.0 * y - 4.0)
        * (7.0 * y - 2.0)
        + 9.52777777777778
        * x
        * y
        * (y - 1)
        * (3.5 * y - 0.5)
        * (3.5 * y - 2.5)
        * (7.0 * y - 4.0)
        * (7.0 * y - 2.0)
        + 4.08333333333333
        * x
        * y
        * (2.33333333333333 * y - 2.0)
        * (3.5 * y - 0.5)
        * (3.5 * y - 2.5)
        * (7.0 * y - 4.0)
        * (7.0 * y - 2.0)
        + 4.08333333333333
        * x
        * (y - 1)
        * (2.33333333333333 * y - 2.0)
        * (3.5 * y - 0.5)
        * (3.5 * y - 2.5)
        * (7.0 * y - 4.0)
        * (7.0 * y - 2.0)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_9(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        1.0
        * y
        * (
            -5719.04861111111 * y**6
            + 19608.1666666667 * y**5
            - 26377.6527777778 * y**4
            + 17607.3333333333 * y**3
            - 6062.04861111111 * y**2
            + 1004.5 * y
            - 61.25
        )
    )
    phi_dy = 1.0 * x * y * (
        -34314.2916666667 * y**5
        + 98040.8333333334 * y**4
        - 105510.611111111 * y**3
        + 52822.0 * y**2
        - 12124.0972222222 * y
        + 1004.5
    ) + 1.0 * x * (
        -5719.04861111111 * y**6
        + 19608.1666666667 * y**5
        - 26377.6527777778 * y**4
        + 17607.3333333333 * y**3
        - 6062.04861111111 * y**2
        + 1004.5 * y
        - 61.25
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_10(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        4.9
        * y
        * (y - 1)
        * (1.75 * y - 0.25)
        * (2.33333333333333 * y - 0.666666666666667)
        * (3.5 * y - 1.5)
        * (7.0 * y - 6.0)
        * (7.0 * y - 4.0)
    )
    phi_dy = (
        34.3
        * x
        * y
        * (y - 1)
        * (1.75 * y - 0.25)
        * (2.33333333333333 * y - 0.666666666666667)
        * (3.5 * y - 1.5)
        * (7.0 * y - 6.0)
        + 34.3
        * x
        * y
        * (y - 1)
        * (1.75 * y - 0.25)
        * (2.33333333333333 * y - 0.666666666666667)
        * (3.5 * y - 1.5)
        * (7.0 * y - 4.0)
        + 17.15
        * x
        * y
        * (y - 1)
        * (1.75 * y - 0.25)
        * (2.33333333333333 * y - 0.666666666666667)
        * (7.0 * y - 6.0)
        * (7.0 * y - 4.0)
        + 11.4333333333333
        * x
        * y
        * (y - 1)
        * (1.75 * y - 0.25)
        * (3.5 * y - 1.5)
        * (7.0 * y - 6.0)
        * (7.0 * y - 4.0)
        + 8.575
        * x
        * y
        * (y - 1)
        * (2.33333333333333 * y - 0.666666666666667)
        * (3.5 * y - 1.5)
        * (7.0 * y - 6.0)
        * (7.0 * y - 4.0)
        + 4.9
        * x
        * y
        * (1.75 * y - 0.25)
        * (2.33333333333333 * y - 0.666666666666667)
        * (3.5 * y - 1.5)
        * (7.0 * y - 6.0)
        * (7.0 * y - 4.0)
        + 4.9
        * x
        * (y - 1)
        * (1.75 * y - 0.25)
        * (2.33333333333333 * y - 0.666666666666667)
        * (3.5 * y - 1.5)
        * (7.0 * y - 6.0)
        * (7.0 * y - 4.0)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_11(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        1.0
        * y
        * (
            -1143.80972222222 * y**6
            + 3594.83055555555 * y**5
            - 4435.18055555555 * y**4
            + 2734.47222222222 * y**3
            - 880.843055555555 * y**2
            + 138.697222222222 * y
            - 8.16666666666666
        )
    )
    phi_dy = 1.0 * x * y * (
        -6862.85833333333 * y**5
        + 17974.1527777778 * y**4
        - 17740.7222222222 * y**3
        + 8203.41666666666 * y**2
        - 1761.68611111111 * y
        + 138.697222222222
    ) + 1.0 * x * (
        -1143.80972222222 * y**6
        + 3594.83055555555 * y**5
        - 4435.18055555555 * y**4
        + 2734.47222222222 * y**3
        - 880.843055555555 * y**2
        + 138.697222222222 * y
        - 8.16666666666666
    )
    return np.array([phi_dx, phi_dy])


Q17_SF_LIST = [
    phi_0,
    phi_1,
    phi_2,
    phi_3,
    phi_4,
    phi_5,
    phi_6,
    phi_7,
    phi_8,
    phi_9,
    phi_10,
    phi_11,
]

Q17_GRAD_SF_LIST = [
    grad_phi_0,
    grad_phi_1,
    grad_phi_2,
    grad_phi_3,
    grad_phi_4,
    grad_phi_5,
    grad_phi_6,
    grad_phi_7,
    grad_phi_8,
    grad_phi_9,
    grad_phi_10,
    grad_phi_11,
]
