import numpy as np
import numpy.typing as npt


def phi_0(x: float, y: float) -> float:
    return (
        y
        * (1.0 - 1.0 * x)
        * (
            -388.8 * y**5
            + 1296.0 * y**4
            - 1674.0 * y**3
            + 1044.0 * y**2
            - 313.2 * y
            + 36.0
        )
    )


def phi_1(x: float, y: float) -> float:
    return (
        4.5
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (2.0 * y - 1.66666666666667)
        * (3.0 * y - 2.0)
        * (6.0 * y - 3.0)
        * (6.0 * y - 1.0)
    )


def phi_2(x: float, y: float) -> float:
    return (
        y
        * (1.0 - 1.0 * x)
        * (
            -1296.0 * y**5
            + 3888.0 * y**4
            - 4356.0 * y**3
            + 2232.0 * y**2
            - 508.0 * y
            + 40.0
        )
    )


def phi_3(x: float, y: float) -> float:
    return (
        4.5
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (2.0 * y - 0.333333333333333)
        * (3.0 * y - 1.0)
        * (6.0 * y - 5.0)
        * (6.0 * y - 3.0)
    )


def phi_4(x: float, y: float) -> float:
    return (
        y
        * (1.0 - 1.0 * x)
        * (
            -388.8 * y**5
            + 1036.8 * y**4
            - 1026.0 * y**3
            + 468.0 * y**2
            - 97.2 * y
            + 7.2
        )
    )


def phi_5(x: float, y: float) -> float:
    return (
        1.0
        * x
        * y
        * (
            -388.8 * y**5
            + 1296.0 * y**4
            - 1674.0 * y**3
            + 1044.0 * y**2
            - 313.2 * y
            + 36.0
        )
    )


def phi_6(x: float, y: float) -> float:
    return (
        4.5
        * x
        * y
        * (y - 1)
        * (2.0 * y - 1.66666666666667)
        * (3.0 * y - 2.0)
        * (6.0 * y - 3.0)
        * (6.0 * y - 1.0)
    )


def phi_7(x: float, y: float) -> float:
    return (
        1.0
        * x
        * y
        * (
            -1296.0 * y**5
            + 3888.0 * y**4
            - 4356.0 * y**3
            + 2232.0 * y**2
            - 508.0 * y
            + 40.0
        )
    )


def phi_8(x: float, y: float) -> float:
    return (
        4.5
        * x
        * y
        * (y - 1)
        * (2.0 * y - 0.333333333333333)
        * (3.0 * y - 1.0)
        * (6.0 * y - 5.0)
        * (6.0 * y - 3.0)
    )


def phi_9(x: float, y: float) -> float:
    return (
        1.0
        * x
        * y
        * (
            -388.8 * y**5
            + 1036.8 * y**4
            - 1026.0 * y**3
            + 468.0 * y**2
            - 97.2 * y
            + 7.2
        )
    )


def grad_phi_0(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        -1.0
        * y
        * (
            -388.8 * y**5
            + 1296.0 * y**4
            - 1674.0 * y**3
            + 1044.0 * y**2
            - 313.2 * y
            + 36.0
        )
    )
    phi_dy = y * (1.0 - 1.0 * x) * (
        -1944.0 * y**4 + 5184.0 * y**3 - 5022.0 * y**2 + 2088.0 * y - 313.2
    ) + (1.0 - 1.0 * x) * (
        -388.8 * y**5
        + 1296.0 * y**4
        - 1674.0 * y**3
        + 1044.0 * y**2
        - 313.2 * y
        + 36.0
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_1(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        -4.5
        * y
        * (y - 1)
        * (2.0 * y - 1.66666666666667)
        * (3.0 * y - 2.0)
        * (6.0 * y - 3.0)
        * (6.0 * y - 1.0)
    )
    phi_dy = (
        27.0
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (2.0 * y - 1.66666666666667)
        * (3.0 * y - 2.0)
        * (6.0 * y - 3.0)
        + 27.0
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (2.0 * y - 1.66666666666667)
        * (3.0 * y - 2.0)
        * (6.0 * y - 1.0)
        + 13.5
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (2.0 * y - 1.66666666666667)
        * (6.0 * y - 3.0)
        * (6.0 * y - 1.0)
        + 9.0
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (3.0 * y - 2.0)
        * (6.0 * y - 3.0)
        * (6.0 * y - 1.0)
        + 4.5
        * y
        * (1.0 - 1.0 * x)
        * (2.0 * y - 1.66666666666667)
        * (3.0 * y - 2.0)
        * (6.0 * y - 3.0)
        * (6.0 * y - 1.0)
        + 4.5
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (2.0 * y - 1.66666666666667)
        * (3.0 * y - 2.0)
        * (6.0 * y - 3.0)
        * (6.0 * y - 1.0)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_2(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        -1.0
        * y
        * (
            -1296.0 * y**5
            + 3888.0 * y**4
            - 4356.0 * y**3
            + 2232.0 * y**2
            - 508.0 * y
            + 40.0
        )
    )
    phi_dy = y * (1.0 - 1.0 * x) * (
        -6480.0 * y**4 + 15552.0 * y**3 - 13068.0 * y**2 + 4464.0 * y - 508.0
    ) + (1.0 - 1.0 * x) * (
        -1296.0 * y**5
        + 3888.0 * y**4
        - 4356.0 * y**3
        + 2232.0 * y**2
        - 508.0 * y
        + 40.0
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_3(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        -4.5
        * y
        * (y - 1)
        * (2.0 * y - 0.333333333333333)
        * (3.0 * y - 1.0)
        * (6.0 * y - 5.0)
        * (6.0 * y - 3.0)
    )
    phi_dy = (
        27.0
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (2.0 * y - 0.333333333333333)
        * (3.0 * y - 1.0)
        * (6.0 * y - 5.0)
        + 27.0
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (2.0 * y - 0.333333333333333)
        * (3.0 * y - 1.0)
        * (6.0 * y - 3.0)
        + 13.5
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (2.0 * y - 0.333333333333333)
        * (6.0 * y - 5.0)
        * (6.0 * y - 3.0)
        + 9.0
        * y
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (3.0 * y - 1.0)
        * (6.0 * y - 5.0)
        * (6.0 * y - 3.0)
        + 4.5
        * y
        * (1.0 - 1.0 * x)
        * (2.0 * y - 0.333333333333333)
        * (3.0 * y - 1.0)
        * (6.0 * y - 5.0)
        * (6.0 * y - 3.0)
        + 4.5
        * (1.0 - 1.0 * x)
        * (y - 1)
        * (2.0 * y - 0.333333333333333)
        * (3.0 * y - 1.0)
        * (6.0 * y - 5.0)
        * (6.0 * y - 3.0)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_4(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        -1.0
        * y
        * (
            -388.8 * y**5
            + 1036.8 * y**4
            - 1026.0 * y**3
            + 468.0 * y**2
            - 97.2 * y
            + 7.2
        )
    )
    phi_dy = y * (1.0 - 1.0 * x) * (
        -1944.0 * y**4 + 4147.2 * y**3 - 3078.0 * y**2 + 936.0 * y - 97.2
    ) + (1.0 - 1.0 * x) * (
        -388.8 * y**5
        + 1036.8 * y**4
        - 1026.0 * y**3
        + 468.0 * y**2
        - 97.2 * y
        + 7.2
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_5(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        1.0
        * y
        * (
            -388.8 * y**5
            + 1296.0 * y**4
            - 1674.0 * y**3
            + 1044.0 * y**2
            - 313.2 * y
            + 36.0
        )
    )
    phi_dy = 1.0 * x * y * (
        -1944.0 * y**4 + 5184.0 * y**3 - 5022.0 * y**2 + 2088.0 * y - 313.2
    ) + 1.0 * x * (
        -388.8 * y**5
        + 1296.0 * y**4
        - 1674.0 * y**3
        + 1044.0 * y**2
        - 313.2 * y
        + 36.0
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_6(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        4.5
        * y
        * (y - 1)
        * (2.0 * y - 1.66666666666667)
        * (3.0 * y - 2.0)
        * (6.0 * y - 3.0)
        * (6.0 * y - 1.0)
    )
    phi_dy = (
        27.0
        * x
        * y
        * (y - 1)
        * (2.0 * y - 1.66666666666667)
        * (3.0 * y - 2.0)
        * (6.0 * y - 3.0)
        + 27.0
        * x
        * y
        * (y - 1)
        * (2.0 * y - 1.66666666666667)
        * (3.0 * y - 2.0)
        * (6.0 * y - 1.0)
        + 13.5
        * x
        * y
        * (y - 1)
        * (2.0 * y - 1.66666666666667)
        * (6.0 * y - 3.0)
        * (6.0 * y - 1.0)
        + 9.0 * x * y * (y - 1) * (3.0 * y - 2.0) * (6.0 * y - 3.0) * (6.0 * y - 1.0)
        + 4.5
        * x
        * y
        * (2.0 * y - 1.66666666666667)
        * (3.0 * y - 2.0)
        * (6.0 * y - 3.0)
        * (6.0 * y - 1.0)
        + 4.5
        * x
        * (y - 1)
        * (2.0 * y - 1.66666666666667)
        * (3.0 * y - 2.0)
        * (6.0 * y - 3.0)
        * (6.0 * y - 1.0)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_7(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        1.0
        * y
        * (
            -1296.0 * y**5
            + 3888.0 * y**4
            - 4356.0 * y**3
            + 2232.0 * y**2
            - 508.0 * y
            + 40.0
        )
    )
    phi_dy = 1.0 * x * y * (
        -6480.0 * y**4 + 15552.0 * y**3 - 13068.0 * y**2 + 4464.0 * y - 508.0
    ) + 1.0 * x * (
        -1296.0 * y**5
        + 3888.0 * y**4
        - 4356.0 * y**3
        + 2232.0 * y**2
        - 508.0 * y
        + 40.0
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_8(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        4.5
        * y
        * (y - 1)
        * (2.0 * y - 0.333333333333333)
        * (3.0 * y - 1.0)
        * (6.0 * y - 5.0)
        * (6.0 * y - 3.0)
    )
    phi_dy = (
        27.0
        * x
        * y
        * (y - 1)
        * (2.0 * y - 0.333333333333333)
        * (3.0 * y - 1.0)
        * (6.0 * y - 5.0)
        + 27.0
        * x
        * y
        * (y - 1)
        * (2.0 * y - 0.333333333333333)
        * (3.0 * y - 1.0)
        * (6.0 * y - 3.0)
        + 13.5
        * x
        * y
        * (y - 1)
        * (2.0 * y - 0.333333333333333)
        * (6.0 * y - 5.0)
        * (6.0 * y - 3.0)
        + 9.0 * x * y * (y - 1) * (3.0 * y - 1.0) * (6.0 * y - 5.0) * (6.0 * y - 3.0)
        + 4.5
        * x
        * y
        * (2.0 * y - 0.333333333333333)
        * (3.0 * y - 1.0)
        * (6.0 * y - 5.0)
        * (6.0 * y - 3.0)
        + 4.5
        * x
        * (y - 1)
        * (2.0 * y - 0.333333333333333)
        * (3.0 * y - 1.0)
        * (6.0 * y - 5.0)
        * (6.0 * y - 3.0)
    )
    return np.array([phi_dx, phi_dy])


def grad_phi_9(x: float, y: float) -> npt.NDArray[np.float64]:
    phi_dx = (
        1.0
        * y
        * (
            -388.8 * y**5
            + 1036.8 * y**4
            - 1026.0 * y**3
            + 468.0 * y**2
            - 97.2 * y
            + 7.2
        )
    )
    phi_dy = 1.0 * x * y * (
        -1944.0 * y**4 + 4147.2 * y**3 - 3078.0 * y**2 + 936.0 * y - 97.2
    ) + 1.0 * x * (
        -388.8 * y**5
        + 1036.8 * y**4
        - 1026.0 * y**3
        + 468.0 * y**2
        - 97.2 * y
        + 7.2
    )
    return np.array([phi_dx, phi_dy])


Q16_SF_LIST = [phi_0, phi_1, phi_2, phi_3, phi_4, phi_5, phi_6, phi_7, phi_8, phi_9]

Q16_GRAD_SF_LIST = [
    grad_phi_0,
    grad_phi_1,
    grad_phi_2,
    grad_phi_3,
    grad_phi_4,
    grad_phi_5,
    grad_phi_6,
    grad_phi_7,
    grad_phi_8,
    grad_phi_9,
]
